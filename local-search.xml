<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>你应该知道的CSS技巧</title>
    <link href="/lbx2019/09/23/css/"/>
    <url>2019/09/23/css/</url>
    
    <content type="html"><![CDATA[<p>作为前端，在工作中难免会遇到关于排版的问题，以下是我整理的一些关于CSS的技巧，希望对你能有帮助。</p><h3 id="1、每个单词的首字母大写"><a href="#1、每个单词的首字母大写" class="headerlink" title="1、每个单词的首字母大写"></a>1、每个单词的首字母大写</h3><p>   一般我们会用JS实现，其实CSS就可以实现。<br>      JS代码：</p><pre><code>    var str = &#39;hello world&#39;;    str.replace(/( |^)[a-z]/g,(L)=&gt;L.toUpperCase()    Heool World</code></pre><p>   css实现:</p><pre><code>    text-transform：capitalize; （ 文本中每个单词以大写字母开头）    text-transform的属性值有：                        uppercase （全部大写）                        lowercase  (全部小写)                        capitalize  (首字母大写)                        none        (默认)</code></pre><h3 id="2、元素选中高亮"><a href="#2、元素选中高亮" class="headerlink" title="2、元素选中高亮"></a>2、元素选中高亮</h3><pre><code>    如input元素:    input:checked + .check {        color:red;    }</code></pre><h3 id="3、相邻元素添加边框"><a href="#3、相邻元素添加边框" class="headerlink" title="3、相邻元素添加边框"></a>3、相邻元素添加边框</h3><p>   有时候我们给元素设置border-bottom的时候,并不想给最后一个元素设置</p><pre><code>    li+li {        border-bottom: 1px solid red;    }</code></pre><h3 id="4、多列等高"><a href="#4、多列等高" class="headerlink" title="4、多列等高"></a>4、多列等高</h3><pre><code>    display:table;</code></pre><h3 id="5、清除浮动的影响"><a href="#5、清除浮动的影响" class="headerlink" title="5、清除浮动的影响"></a>5、清除浮动的影响</h3><pre><code>    display:flow-root;</code></pre><h3 id="6、input的size属性"><a href="#6、input的size属性" class="headerlink" title="6、input的size属性"></a>6、input的size属性</h3><pre><code>    在input的type类型为text/password时，size的属性值代表input可容纳的字符的个数，除此之外size 属性会告诉用户端其初始宽度，宽度以 ‘px’ 的形式给出</code></pre><h3 id="7、position的粘粘属性"><a href="#7、position的粘粘属性" class="headerlink" title="7、position的粘粘属性"></a>7、position的粘粘属性</h3><p>   position的属性大家常见的应该就是absolute、fixed、static<br>   为大家介绍一个新的属性 sticky</p><pre><code>    position:sticky; 设置sticky的同时给元素一个（top,botton,left,right）即可使用    使用条件：        1、父元素不能overflow:hidden 或者 overflow:auto        2、必须指定 top、bottom、left、right        3、父元素的高度不能低于sticky元素的搞丢        4、sticky元素仅在其父元素内生效</code></pre><h3 id="8、快速重置表单元素"><a href="#8、快速重置表单元素" class="headerlink" title="8、快速重置表单元素"></a>8、快速重置表单元素</h3><p>   原始的button按钮要重置挺麻烦的，要设置好几个属性</p><pre><code>    button {        background: none;          border: none;          color: inherit;          font: inherit;          outline: none;          padding: 0;    }其实值需要设置    button {        all:unset;    }</code></pre><h3 id="9、文本省略号显示"><a href="#9、文本省略号显示" class="headerlink" title="9、文本省略号显示"></a>9、文本省略号显示</h3><p>   文本省略号，相信大家都很常用 </p><pre><code>    这是不折行的情况    div {      white-space:nowrap;/* 规定文本是否折行 */      overflow: hidden;/* 规定超出内容宽度的元素隐藏 */      text-overflow: ellipsis;      /* 规定超出的内容文本省略号显示，通常跟上面的属性连用，因为没有上面的属性不会触发超出规定的内容 */    }       折行     div {       overflow: hidden;       text-overflow: ellipsis;       display: -webkit-box; /* 将对象作为弹性伸缩盒子模型显示 */       -webkit-line-clamp: 4; /* 控制最多显示几行 */       -webkit-box-orient: vertical; /* 设置或检索伸缩盒对象的子元素的排列方式 */     }    </code></pre><h3 id="10、设置文本两端对齐"><a href="#10、设置文本两端对齐" class="headerlink" title="10、设置文本两端对齐"></a>10、设置文本两端对齐</h3><pre><code>    div {        width: 100px;        padding: 0 10px;        background: pink;        margin-bottom: 10px;        text-align-last:justify; /* 关键属性 */    }  </code></pre><h3 id="11、给元素添加行高"><a href="#11、给元素添加行高" class="headerlink" title="11、给元素添加行高"></a>11、给元素添加行高</h3><p>   当给元素添加行高我们需要分别添加到每一个元素上p、h,但是其实我们直接添加到body上就可以了</p><pre><code>     body {        line-height:1;      }</code></pre><h3 id="12、-css首字放大"><a href="#12、-css首字放大" class="headerlink" title="12、 css首字放大"></a>12、 css首字放大</h3><pre><code>p:first-letter{    display:block;    float:left;    margin: 5px 5px 0 0;      color:red;    font-size:1.4rem;    background:#ddd;}    </code></pre><h3 id="13、移除被点击链接的点框"><a href="#13、移除被点击链接的点框" class="headerlink" title="13、移除被点击链接的点框"></a>13、移除被点击链接的点框</h3><pre><code>a{    outline:none 或者  outline:0}</code></pre><h3 id="14、计算属性值"><a href="#14、计算属性值" class="headerlink" title="14、计算属性值"></a>14、计算属性值</h3><pre><code>div {    width:calc(100%-100px) 让宽度为100%的减去100px    }</code></pre><h3 id="15、内容可编辑"><a href="#15、内容可编辑" class="headerlink" title="15、内容可编辑"></a>15、内容可编辑</h3><pre><code>&lt;ul contenteditable=&quot;true&quot;&gt;&lt;li&gt;11111111 &lt;/li&gt;&lt;li&gt;2222222&lt;/li&gt;&lt;li&gt;3333333&lt;/li&gt;&lt;/ul&gt;</code></pre><h3 id="16、隐藏文本的两种方法"><a href="#16、隐藏文本的两种方法" class="headerlink" title="16、隐藏文本的两种方法"></a>16、隐藏文本的两种方法</h3><pre><code>p{    font-size:0;} p{        text-indent:-1000;} </code></pre><h3 id="17、图片在指定尺寸后，如何保持比例"><a href="#17、图片在指定尺寸后，如何保持比例" class="headerlink" title="17、图片在指定尺寸后，如何保持比例"></a>17、图片在指定尺寸后，如何保持比例</h3><pre><code>img {    object-fit:cover; 或者 contain}</code></pre><h3 id="18、背景虚化"><a href="#18、背景虚化" class="headerlink" title="18、背景虚化"></a>18、背景虚化</h3><pre><code>div {    filter:blur(2px)}</code></pre><h3 id="19、设置宽度"><a href="#19、设置宽度" class="headerlink" title="19、设置宽度"></a>19、设置宽度</h3><pre><code>div {    width:fill-available; // 等同于block} div {        width:fill-content; // 等同于inline-block} </code></pre><h3 id="20、link状态设置顺序"><a href="#20、link状态设置顺序" class="headerlink" title="20、link状态设置顺序"></a>20、link状态设置顺序</h3><pre><code>link的四种状态，需要按照下面的前后顺序来设置a:link a:visited a:hover a:active</code></pre><h3 id="21、font-size基准"><a href="#21、font-size基准" class="headerlink" title="21、font-size基准"></a>21、font-size基准</h3><p>  浏览器的缺省字体大小是16px，你可以先将基准字体大小设为10px：</p><pre><code>body {font-size:62.5%;}</code></pre><p>  后面统一采用em作为字体单位，2.4em就表示24px。</p><pre><code>h1 {font-size: 2.4 em}</code></pre><h3 id="22、用图片充当标志"><a href="#22、用图片充当标志" class="headerlink" title="22、用图片充当标志"></a>22、用图片充当标志</h3><p>  默认情况下，浏览器会用黑圈来充当列表标志，你可以用图片代替</p><pre><code>ul li {    background-image: url(&quot;path-to-your-image&quot;);     background-repeat: none;     background-position: 0 0.5em; }</code></pre><h3 id="23、取消IE的文本滚动"><a href="#23、取消IE的文本滚动" class="headerlink" title="23、取消IE的文本滚动"></a>23、取消IE的文本滚动</h3><pre><code>textarea { overflow: auto; }</code></pre><h3 id="24、-黑白图像"><a href="#24、-黑白图像" class="headerlink" title="24、 黑白图像"></a>24、 黑白图像</h3><p>  这会让你的彩色照片变成黑白的图像</p><pre><code>img.desaturate {     filter: grayscale(100%);      -webkit-filter: grayscale(100%);     -moz-filter: grayscale(100%);      -ms-filter: grayscale(100%);      -o-filter: grayscale(100%); }  </code></pre><h3 id="25、使用not取消样式"><a href="#25、使用not取消样式" class="headerlink" title="25、使用not取消样式"></a>25、使用not取消样式</h3><p>   一般我们给元素添加样式会先给所以的都添加，然后再取消我们不想要的哪个元素样式</p><pre><code>/* add border */.nav li { border-right: 1px solid #666;}/* remove border */.nav li:last-child { border-right: none;}</code></pre><p>   可以直接使用:not() 伪类实现</p><pre><code>.nav li:not(:last-child) { border-right: 1px solid #666;}</code></pre><h3 id="26、禁用鼠标点击"><a href="#26、禁用鼠标点击" class="headerlink" title="26、禁用鼠标点击"></a>26、禁用鼠标点击</h3><pre><code>css3属性，当一个元素设置之后将无法点击    .disabled { pointer-events: none; }</code></pre><h3 id="27、模糊文本"><a href="#27、模糊文本" class="headerlink" title="27、模糊文本"></a>27、模糊文本</h3><pre><code>.blur {     color: transparent;     text-shadow: 0 0 5px rgba(0,0,0,0.5);}</code></pre><h3 id="28、禁止用户选中文本"><a href="#28、禁止用户选中文本" class="headerlink" title="28、禁止用户选中文本"></a>28、禁止用户选中文本</h3><pre><code>div {user-select: none; /* Standard syntax */}</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两个数组的交集 你能想出多少种方法</title>
    <link href="/lbx2019/09/22/array-common/"/>
    <url>2019/09/22/array-common/</url>
    
    <content type="html"><![CDATA[<img src="/lbx/2019/09/22/array-common/array-common.jpeg" title="This is an example image"><p>看到标题可能最先想到的方法就是for循环了，没错for循环是一种方法。</p><pre><code>var intersection = function (nums1, nums2) {      var arr = [];   for (var i = 0; i&lt; nums1.length;i++){           if(nums2.indexOf(nums1[i]) &gt; -1 &amp;&amp; arr.indexOf(nums1[i]) === -1){                arr.push(nums1[i]);        }​    }      return arr;    };</code></pre><p>除了for循环还有别的方法吗？当然有，下面让我们一起来探索吧～</p><p>利用while循环</p><pre><code> var intersection = function (nums1, nums2) {   var i = 0;        var arr = [];        while(i&lt; nums1.length){            if(nums2.indexOf(nums1[i]) &gt; -1 &amp;&amp; arr.indexOf(nums1[i]) === -1){                arr.push(nums1[i])            }             i++;        }          return arr;    };</code></pre><p>利用new Set()将数组转化为对象</p><pre><code>var intersection = function(nums1, nums2) {    var hash1 = new Set(nums1);    var hash2 = new Set(nums2); // 去重、转化成{value, value1}的形式 如：new Set([1,2,1]) ---&gt; {1,2}    var res=[];    for(var i of hash1){        if(hash2.has(i)){            res.push(i);        }    }    return res;};</code></pre><p>利用filter查找</p><pre><code>var intersection = function(nums1, nums2) {    var hash1 = new Set(nums1);    return nums2.filter(function(num,index,self){           // indexOf 会返回在数组中找到符合的第一个元素的位置，因此会过滤重复元素            return hash1.has(num)&amp;&amp;(self.indexOf(num)==index);        });};</code></pre><p>同理可</p><pre><code>var intersection = function(nums1, nums2) {    //数组交集    let intersect = nums1.filter(x =&gt; nums2.includes(x));    //数组去重    return [... new Set(intersect)];};</code></pre><p>以上便是我整理的关于求两数组的交集的方法，大家有什么意见可以提出来</p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS神奇的类型转换</title>
    <link href="/lbx2019/09/22/jsType/"/>
    <url>2019/09/22/jsType/</url>
    
    <content type="html"><![CDATA[<img src="/lbx/2019/09/22/jsType/jsType.jpeg" title="This is an example image"><p>​众所周知JS是弱类型语言，弱类型语言的最大特点是允许隐式类型转换，即源码中没有明显的类型转换代码，也就是说你可以为一个变量赋值为字符串、也可以赋值为数值，也可以让不同类型的变量进行相加。语言的解析器会自动（隐式）转换。</p><p>隐式转换规则<br>1、转成string类型： +  （字符串连接符）</p><p>2、转成Number类型：++/–  （自增自减运算符） +-*/%（算术运算符）&gt; 、&lt; 、&gt;=、&lt;=、==、!=、===、!== (关系运算符)</p><p>3、转成boolean类型：！（逻辑运算符）</p><p>但是在实际应用中，我们总是会分不清 + 是作为字符串连接还是算术运算符。让我们看一下下面的列子,你觉得它会返回什么？</p><pre><code>console.log( 1 + &#39;true&#39;)  console.log( 1 + true )console.log( 1 + undefined )console.log( 1 + null )</code></pre><p>正确答案是：<br><code>1true2NaN1</code></p><p>让我们分析一下,首先要理解+什么时候作为字符串连接符什么时候为算术运算符，以及其作用。</p><p>字符串连接符（+ : 只要+号的两边有一边是字符串）<br>算术运算符 （ 两边都为数字 ）<br>1、字符型连接符+ ：会把其他数据类型调用string()方法转成字符串然后进行拼接。<br>2、算术运算符 + ：会把其他数据类型调用number（）方法转成数字然后再做加法运算</p><pre><code>1+ &quot;true&quot; ----&gt; String(1) + &quot;true&quot; ---&gt; 1true1+true -----&gt; 1+ Number(true) ----&gt; 1+ 1 -----&gt; 21+undefined ----&gt; 1+ Number(undefined)----&gt; 1 + NaN ---&gt; NaN1+null -----&gt; 1+ Number(null) -----&gt; 1+ 0----&gt; 1</code></pre><p>关系运算符：把其他数据类型转成Number之后再进行比较</p><pre><code>console.log( &#39;2&#39; &gt; 10 )结果为false  &#39;2&#39; &gt; 10----&gt; Number(2) &gt; 10 ----&gt; trueconsole.log( &#39;2&#39; &gt; &#39;10&#39; )</code></pre><p>结果为true,当关系运算符两边都是字符串的时候，同时转为number然后比较，但是此时比较的并不是按照number（）转成的数字，而是按照字符串对应的unicode编码来转成数字。可以通过 str.charCodeAt() 来获取unicode  </p><pre><code>&#39;2&#39;.charCodeAt()----&gt;50&#39;10&#39;.charCodeAt()----&gt;49console.log( &#39;abc&#39; &gt; &#39;b&#39; )</code></pre><p>同理比较的也是unicode编码</p><pre><code>&#39;a&#39;.charCodeAt()----&gt;97&#39;b&#39;.charCodeAt()----&gt;98</code></pre><p>特殊情况：</p><pre><code>console.log( NaN == NaN  ) ----&gt; falseconsole.log(undefined == null)  -----&gt; true</code></pre><p>复杂数据类型在隐式转换时会先转成string,然后再转成number运算</p><p>一个常见的面试题：</p><pre><code> var a = ？？？    if(a == 1 &amp;&amp; a == 2 &amp;&amp; a ==3 ){            console.log(1)    }</code></pre><p>我们可以利用复杂数据类型，调用valueOf()然后转成number,对象的valuueOf（）方法也是可以重写的。</p><pre><code> var a = {        i :0,        valusOf: function(){            return ++a.i   // 没调用一次就让a的i属性自增一次并返回       }   }</code></pre><p>逻辑非隐式转换与关系运算符隐式转换</p><pre><code>console.log ([] == 0 )结果为true, [] ----&gt; [].valueOf().toString() ---&gt; &#39;&#39; == 0 ----&gt; Number(&#39;&#39;) == 0;</code></pre><p>那 ![] == 0的结果应该为true,还是false呢</p><p>答案是true。</p><p>要想理解，我们要先弄明白非（!）运算符</p><p>*逻辑非：将其他数据使用Boolean()转成布尔类型 </p><p>只有以下八种情况转换为Boolean会得到false,除此之外都为true </p><pre><code>0、-0、NaN、undefined、null、空字符串、false、document all()</code></pre><p>我们再来看两个列子： </p><pre><code> console.log( [] == [] );// false  原因：引用类型数据存在堆中，栈中存储的是地址，所以为falseconsole.log( ![] == [] )[].valueOf().toString() ---&gt; &#39;&#39;![] -----&gt; false Number(&#39;&#39;) ==Number(false) ---&gt; true</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>